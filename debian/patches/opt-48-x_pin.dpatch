#! /bin/sh /usr/share/dpatch/dpatch-run
## opt-48_pin.dpatch by Jörg Wendel (Horchi)
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Patch for the PIN plugin from version 0.1.7 of the Plugin
## (vdr-1.4.5.diff)

@DPATCH@
diff -urNad vdr-1.4.7~/Makefile vdr-1.4.7/Makefile
--- vdr-1.4.7~/Makefile	2007-08-24 00:09:08.000000000 +0200
+++ vdr-1.4.7/Makefile	2007-08-24 00:09:09.000000000 +0200
@@ -42,6 +42,8 @@
 
 OBJS += osdcontroller.o rcontroller.o dvbsub.o vdrttxtsubshooks.o
 
+OBJS += childlock.o
+
 FIXFONT_ISO8859_1 = -adobe-courier-bold-r-normal--25-*-100-100-m-*-iso8859-1
 OSDFONT_ISO8859_1 = -adobe-helvetica-medium-r-normal--23-*-100-100-p-*-iso8859-1
 SMLFONT_ISO8859_1 = -adobe-helvetica-medium-r-normal--18-*-100-100-p-*-iso8859-1
diff -urNad vdr-1.4.7~/childlock.c vdr-1.4.7/childlock.c
--- vdr-1.4.7~/childlock.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.4.7/childlock.c	2007-08-24 00:09:09.000000000 +0200
@@ -0,0 +1,166 @@
+#include "childlock.h"
+#include "childlockservice.h"
+#include "plugin.h"
+
+using namespace PinPatch;
+
+IChildLockService* ChildLock::_cachedChildLockService = NULL;
+INotificationService* ChildLock::_cachedNotificationService = NULL;
+
+IChildLockService* ChildLock::ChildLockService()
+{
+    if (!_cachedChildLockService)
+    {
+        IChildLockService* childLockService;
+
+        if (cPluginManager::CallFirstService(CHILDLOCK_SERVICE_ID, &childLockService))
+        {
+            _cachedChildLockService = childLockService;
+        }
+        else
+        {
+            _cachedChildLockService = NULL;
+        }
+    }
+
+    return _cachedChildLockService;
+}
+
+bool ChildLock::IsUnlocked()
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsUnlocked();
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsMenuProtected(const char* MenuName)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsMenuProtected(MenuName);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsChannelProtected(const cChannel* Channel)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsChannelProtected(Channel);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsRecordingProtected(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsRecordingProtected(Recording, Name, Base, isDirectory);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsPluginProtected(cPlugin* Plugin)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsPluginProtected(Plugin);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsMenuHidden(const char* MenuName)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsMenuHidden(MenuName);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsPluginHidden(cPlugin* Plugin)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsPluginHidden(Plugin);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+bool ChildLock::IsRecordingHidden(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory)
+{
+    if (IChildLockService* childLockService = ChildLockService())
+    {
+        return childLockService->IsRecordingHidden(Recording, Name, Base, isDirectory);
+    }
+    else
+    {
+        return false;
+    }
+}
+
+INotificationService* ChildLock::NotificationService()
+{
+    if (!_cachedNotificationService)
+    {
+        INotificationService* notificationService;
+
+        if (cPluginManager::CallFirstService(NOTIFICATION_SERVICE_ID, &notificationService))
+        {
+            _cachedNotificationService = notificationService;
+        }
+        else
+        {
+            _cachedNotificationService = NULL;
+        }
+    }
+
+    return _cachedNotificationService;
+}
+
+void ChildLock::NotifyTimerCreation(cTimer* Timer, const cEvent *Event)
+{
+    if (INotificationService* notificationService = NotificationService())
+    {
+        notificationService->NotifyTimerCreation(Timer, Event);
+    }
+}
+
+void ChildLock::NotifyRecordingStart(const char* FileName)
+{
+    if (INotificationService* notificationService = NotificationService())
+    {
+        notificationService->NotifyRecordingStart(FileName);
+    }
+}
+
+void ChildLock::NotifyUserAction(const eKeys key, const cOsdObject* Interact)
+{
+    if (INotificationService* notificationService = NotificationService())
+    {
+        notificationService->NotifyUserAction(key, Interact);
+    }
+}
diff -urNad vdr-1.4.7~/childlock.h vdr-1.4.7/childlock.h
--- vdr-1.4.7~/childlock.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.4.7/childlock.h	2007-08-24 00:09:09.000000000 +0200
@@ -0,0 +1,47 @@
+#ifndef __CHILDLOCK_H
+#define __CHILDLOCK_H
+
+#include "keys.h"
+
+class cChannel;
+class cRecording;
+class cPlugin;
+class cTimer;
+class cEvent;
+class cOsdObject;
+
+namespace PinPatch
+{
+
+class IChildLockService;
+class INotificationService;
+
+class ChildLock
+{
+    private:
+        static IChildLockService* _cachedChildLockService;
+        static INotificationService* _cachedNotificationService;
+        
+    private:
+        static IChildLockService* ChildLockService();
+        static INotificationService* NotificationService();
+
+    public:
+        static bool IsUnlocked();
+
+        static bool IsMenuProtected(const char* MenuName);
+        static bool IsChannelProtected(const cChannel* Channel);
+        static bool IsRecordingProtected(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory);
+        static bool IsPluginProtected(cPlugin* Plugin);
+        
+        static bool IsMenuHidden(const char* MenuName);
+        static bool IsPluginHidden(cPlugin* Plugin);
+        static bool IsRecordingHidden(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory);
+        
+        static void NotifyTimerCreation(cTimer* Timer, const cEvent *Event);
+        static void NotifyRecordingStart(const char* FileName);
+        static void NotifyUserAction(const eKeys key, const cOsdObject* Interact);
+};
+
+};
+#endif
diff -urNad vdr-1.4.7~/childlockservice.h vdr-1.4.7/childlockservice.h
--- vdr-1.4.7~/childlockservice.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.4.7/childlockservice.h	2007-08-24 00:09:23.000000000 +0200
@@ -0,0 +1,46 @@
+#ifndef __CHILDLOCKSERVICE_H
+#define __CHILDLOCKSERVICE_H
+
+#include "keys.h"
+
+class cChannel;
+class cRecording;
+class cPlugin;
+class cTimer;
+class cEvent;
+class cOsdObject;
+
+namespace PinPatch
+{
+
+#define CHILDLOCK_SERVICE_ID "ChildLockService-v0.1::ChildLockService"
+
+class IChildLockService
+{
+    public:
+        virtual ~IChildLockService() {};
+        virtual bool IsUnlocked() = 0;
+
+        virtual bool IsMenuProtected(const char* MenuName) = 0;
+        virtual bool IsChannelProtected(const cChannel* Channel) = 0;
+        virtual bool IsRecordingProtected(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory) = 0;
+        virtual bool IsPluginProtected(cPlugin* Plugin) = 0;
+        
+        virtual bool IsMenuHidden(const char* MenuName) = 0;
+        virtual bool IsPluginHidden(cPlugin* Plugin) = 0;
+        virtual bool IsRecordingHidden(const cRecording* Recording, const char* Name, const char* Base, bool isDirectory) = 0;
+};
+
+#define NOTIFICATION_SERVICE_ID "PinPlugin-v0.1::NotificationService"
+
+class INotificationService
+{
+    public:
+        virtual ~INotificationService() {};
+        virtual void NotifyTimerCreation(cTimer* Timer, const cEvent *Event) = 0;
+        virtual void NotifyRecordingStart(const char* FileName) = 0;
+        virtual void NotifyUserAction(const eKeys key, const cOsdObject* Interact) = 0;
+};
+
+};
+#endif
diff -urNad vdr-1.4.7~/device.c vdr-1.4.7/device.c
--- vdr-1.4.7~/device.c	2007-08-24 00:09:08.000000000 +0200
+++ vdr-1.4.7/device.c	2007-08-24 00:09:09.000000000 +0200
@@ -18,6 +18,7 @@
 #include "receiver.h"
 #include "status.h"
 #include "transfer.h"
+#include "childlock.h"
 
 // --- cPesAssembler ---------------------------------------------------------
 
@@ -596,6 +597,7 @@
      cChannel *channel;
      while ((channel = Channels.GetByNumber(n, Direction)) != NULL) {
            // try only channels which are currently available
+           if (PinPatch::ChildLock::IsChannelProtected(channel) == false)
            if (PrimaryDevice()->ProvidesChannel(channel, Setup.PrimaryLimit) || PrimaryDevice()->CanReplay() && GetDevice(channel, 0))
               break;
            n = channel->Number() + Direction;
@@ -617,6 +619,9 @@
 
 eSetChannelResult cDevice::SetChannel(const cChannel *Channel, bool LiveView)
 {
+  if (LiveView && PinPatch::ChildLock::IsChannelProtected(Channel) == true)
+    return scrNotAvailable;
+   
   if (LiveView)
      StopReplay();
 
diff -urNad vdr-1.4.7~/i18n.c vdr-1.4.7/i18n.c
--- vdr-1.4.7~/i18n.c	2007-08-24 00:09:08.000000000 +0200
+++ vdr-1.4.7/i18n.c	2007-08-24 00:09:09.000000000 +0200
@@ -6693,6 +6693,27 @@
     "",//TODO
     "",//TODO
   },
+  { "Timer$Childlock",
+    "Gesichert",
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "Adulte",
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+    "",//TODO
+  },
   { NULL }
   };
 
diff -urNad vdr-1.4.7~/menu.c vdr-1.4.7/menu.c
--- vdr-1.4.7~/menu.c	2007-08-24 00:09:08.000000000 +0200
+++ vdr-1.4.7/menu.c	2007-08-24 00:09:09.000000000 +0200
@@ -33,6 +33,7 @@
 #include "vdrttxtsubshooks.h"
 #include "dvbsub.h"
 #include "videodir.h"
+#include "childlock.h"
 
 #define MAXWAIT4EPGINFO   3 // seconds
 #define MODETIMEOUT       3 // seconds
@@ -723,6 +724,10 @@
      Add(new cMenuEditBitItem( tr("VPS"),          &data.flags, tfVps));
      Add(new cMenuEditIntItem( tr("Priority"),     &data.priority, 0, MAXPRIORITY));
      Add(new cMenuEditIntItem( tr("Lifetime"),     &data.lifetime, 0, MAXLIFETIME));
+
+     if (PinPatch::ChildLock::IsUnlocked())
+       Add(new cMenuEditBitItem(tr("Timer$Childlock"), &data.flags, tfProtected));
+
      char* p = strrchr(data.file, '~');
      if (p) {
         p++;
@@ -2293,7 +2298,8 @@
   for (cRecording *recording = Recordings.First(); recording; recording = Recordings.Next(recording)) {
       if (!base || (strstr(recording->Name(), base) == recording->Name() && recording->Name()[strlen(base)] == '~')) {
          cMenuRecordingItem *Item = new cMenuRecordingItem(recording, level);
-         if (*Item->Text() && (!LastItem || strcmp(Item->Text(), LastItemText) != 0)) {
+         if ((*Item->Text() && (!LastItem || strcmp(Item->Text(), LastItemText) != 0))
+            && (!PinPatch::ChildLock::IsRecordingHidden(GetRecording(Item), Item->Name(), base, Item->IsDirectory()))) {
             Add(Item);
             LastItem = Item;
             free(LastItemText);
@@ -2356,6 +2362,9 @@
 {
   cMenuRecordingItem *ri = (cMenuRecordingItem *)Get(Current());
   if (ri) {
+     if (PinPatch::ChildLock::IsRecordingProtected(GetRecording(ri), ri->Name(), base, ri->IsDirectory()) == true)
+        return osContinue;
+
      if (ri->IsDirectory())
         Open();
      else {
@@ -3272,6 +3281,8 @@
         }
       else  if ((*i)->IsPluginItem()) {
         const char *item = (*i)->PluginMenuEntry();
+        cPlugin *plugin = cPluginManager::GetPlugin((*i)->PluginIndex());
+        if (!PinPatch::ChildLock::IsPluginHidden(plugin))
         if (item)
           Add(new cMenuPluginItem(hk(item), (*i)->PluginIndex()));
         }
@@ -3281,9 +3292,13 @@
 
   // Basic menu items:
 
+  if (!PinPatch::ChildLock::IsMenuHidden("Schedule"))
   Add(new cOsdItem(hk(tr("Schedule")),   osSchedule));
+  if (!PinPatch::ChildLock::IsMenuHidden("Channels"))
   Add(new cOsdItem(hk(tr("Channels")),   osChannels));
+  if (!PinPatch::ChildLock::IsMenuHidden("Timers"))
   Add(new cOsdItem(hk(tr("Timers")),     osTimers));
+  if (!PinPatch::ChildLock::IsMenuHidden("Recordings"))
   Add(new cOsdItem(hk(tr("Recordings")), osRecordings));
 
   // Plugins:
@@ -3291,18 +3306,22 @@
   for (int i = 0; ; i++) {
       cPlugin *p = cPluginManager::GetPlugin(i);
       if (p) {
+         if (!PinPatch::ChildLock::IsPluginHidden(p)) {
          const char *item = p->MainMenuEntry();
          if (item)
             Add(new cMenuPluginItem(hk(item), i));
          }
+         }
       else
          break;
       }
 
   // More basic menu items:
 
+  if (!PinPatch::ChildLock::IsMenuHidden("Setup"))
   Add(new cOsdItem(hk(tr("Setup")),      osSetup));
   if (Commands.Count())
+     if (!PinPatch::ChildLock::IsMenuHidden("Commands"))
      Add(new cOsdItem(hk(tr("Commands")),  osCommands));
 
   }
@@ -3393,6 +3412,11 @@
   eOSState state = cOsdMenu::ProcessKey(Key);
   HadSubMenu |= HasSubMenu();
 
+  cOsdItem* item = Get(Current());
+  if (item && item->Text() && state != osContinue && state != osUnknown && state != osBack)
+     if (PinPatch::ChildLock::IsMenuProtected(item->Text()))
+        return osContinue;
+
   cOsdMenu *menu = NULL;
   switch (state) {
     case osSchedule:
@@ -3439,6 +3463,7 @@
                          if (item) {
                             cPlugin *p = cPluginManager::GetPlugin(item->PluginIndex());
                             if (p) {
+                               if (!PinPatch::ChildLock::IsPluginProtected(p)) {
                                cOsdObject *menu = p->MainMenuAction();
                                if (menu) {
                                   if (menu->IsMenu())
@@ -3450,6 +3475,7 @@
                                   }
                                }
                             }
+                         }
                          state = osEnd;
                        }
                        break;
@@ -3650,6 +3676,7 @@
   if (Direction) {
      while (Channel) {
            Channel = Direction > 0 ? Channels.Next(Channel) : Channels.Prev(Channel);
+	if (PinPatch::ChildLock::IsChannelProtected(Channel) == false)
            if (Channel && !Channel->GroupSep() && (cDevice::PrimaryDevice()->ProvidesChannel(Channel, Setup.PrimaryLimit) || cDevice::GetDevice(Channel, 0)))
               return Channel;
            }
@@ -4190,6 +4217,7 @@
            for (int i = 0; i < MAXRECORDCONTROLS; i++) {
                if (!RecordControls[i]) {
                   RecordControls[i] = new cRecordControl(device, Timer, Pause);
+                  PinPatch::ChildLock::NotifyRecordingStart(RecordControls[i]->FileName());
                   return RecordControls[i]->Process(time(NULL));
                   }
                }
diff -urNad vdr-1.4.7~/timers.c vdr-1.4.7/timers.c
--- vdr-1.4.7~/timers.c	2007-08-24 00:07:30.000000000 +0200
+++ vdr-1.4.7/timers.c	2007-08-24 00:09:09.000000000 +0200
@@ -14,6 +14,7 @@
 #include "i18n.h"
 #include "libsi/si.h"
 #include "remote.h"
+#include "childlock.h"
 
 // IMPORTANT NOTE: in the 'sscanf()' calls there is a blank after the '%d'
 // format characters in order to allow any number of blanks after a numeric
@@ -23,6 +24,7 @@
 
 cTimer::cTimer(bool Instant, bool Pause, cChannel *Channel)
 {
+  aux = NULL;
   startTime = stopTime = 0;
   lastSetEvent = 0;
   recording = pending = inVpsMargin = false;
@@ -43,7 +45,6 @@
   priority = Pause ? Setup.PausePriority : Setup.DefaultPriority;
   lifetime = Pause ? Setup.PauseLifetime : Setup.DefaultLifetime;
   *file = 0;
-  aux = NULL;
   event = NULL;
   if (Instant && channel)
      snprintf(file, sizeof(file), "%s%s", Setup.MarkInstantRecord ? "@" : "", *Setup.NameInstantRecord ? Setup.NameInstantRecord : channel->Name());
@@ -51,6 +52,7 @@
 
 cTimer::cTimer(const cEvent *Event)
 {
+  aux = NULL;
   startTime = stopTime = 0;
   lastSetEvent = 0;
   recording = pending = inVpsMargin = false;
@@ -79,8 +81,8 @@
   const char *Title = Event->Title();
   if (!isempty(Title))
      strn0cpy(file, Event->Title(), sizeof(file));
-  aux = NULL;
   event = NULL; // let SetEvent() be called to get a log message
+  PinPatch::ChildLock::NotifyTimerCreation(this, Event);
 }
 
 cTimer::cTimer(const cTimer &Timer)
@@ -246,6 +248,8 @@
   return ""; // not NULL, so the caller can always use the result
 }
 
+#define AUX_STR_PROTECTED "<pin-plugin><protected>yes</protected></pin-plugin>"
+
 bool cTimer::Parse(const char *s)
 {
   char *channelbuffer = NULL;
@@ -288,6 +292,8 @@
         result = false;
         }
      }
+  if (aux && strstr(aux, AUX_STR_PROTECTED))
+    SetFlags(tfProtected);
   free(channelbuffer);
   free(daybuffer);
   free(filebuffer);
@@ -557,6 +563,26 @@
 void cTimer::SetFlags(uint Flags)
 {
   flags |= Flags;
+
+  char* tmp = NULL;
+  char* position;
+
+  if (HasFlags(tfProtected)) {
+     if (!aux || !strstr(aux, AUX_STR_PROTECTED)) {
+        if (aux) {
+           tmp = strdup(aux);
+           free(aux);
+           }
+        asprintf(&aux,"%s%s", tmp ? tmp : "", AUX_STR_PROTECTED);
+        }
+     }
+  else if (aux && (position = strstr(aux, AUX_STR_PROTECTED))) {
+     asprintf(&tmp, "%.*s%s", position-aux, aux, position+strlen(AUX_STR_PROTECTED));
+     free(aux);
+     aux = strdup(tmp);
+     }
+
+  free(tmp);
 }
 
 void cTimer::ClrFlags(uint Flags)
diff -urNad vdr-1.4.7~/timers.h vdr-1.4.7/timers.h
--- vdr-1.4.7~/timers.h	2007-08-24 00:07:30.000000000 +0200
+++ vdr-1.4.7/timers.h	2007-08-24 00:09:09.000000000 +0200
@@ -20,6 +20,7 @@
                    tfInstant   = 0x0002,
                    tfVps       = 0x0004,
                    tfRecording = 0x0008,
+                   tfProtected = 0x8000,
                    tfAll       = 0xFFFF,
                  };
 enum eTimerMatch { tmNone, tmPartial, tmFull };
diff -urNad vdr-1.4.7~/vdr.c vdr-1.4.7/vdr.c
--- vdr-1.4.7~/vdr.c	2007-08-24 00:09:08.000000000 +0200
+++ vdr-1.4.7/vdr.c	2007-08-24 00:09:09.000000000 +0200
@@ -62,6 +62,7 @@
 #include "tools.h"
 #include "transfer.h"
 #include "videodir.h"
+#include "childlock.h"
 
 #define MINCHANNELWAIT     10 // seconds to wait between failed channel switchings
 #define ACTIVITYTIMEOUT    60 // seconds before starting housekeeping
@@ -882,6 +883,7 @@
         cOsdObject *Interact = Menu ? Menu : cControl::Control();
         eKeys key = Interface->GetKey((!Interact || !Interact->NeedsFastResponse()) && time(NULL) - LastCamMenu > LASTCAMMENUTIMEOUT);
         if (NORMALKEY(key) != kNone) {
+           PinPatch::ChildLock::NotifyUserAction(key, Interact);
            EITScanner.Activity();
            LastActivity = time(NULL);
            }
@@ -947,10 +949,12 @@
                      cControl::Control()->Hide();
                   cPlugin *plugin = cPluginManager::GetPlugin(PluginName);
                   if (plugin) {
+                   if (!PinPatch::ChildLock::IsPluginProtected(plugin)) {
                      Menu = plugin->MainMenuAction();
                      if (Menu)
                         Menu->Show();
                      }
+                  }
                   else
                      esyslog("ERROR: unknown plugin '%s'", PluginName);
                   }
@@ -1154,9 +1158,11 @@
              // Instant resume of the last viewed recording:
              case kPlay:
                   if (cReplayControl::LastReplayed()) {
+                     if (PinPatch::ChildLock::IsRecordingProtected(0, cReplayControl::LastReplayed(), 0, false) == false) {
                      cControl::Shutdown();
                      cControl::Launch(new cReplayControl);
                      }
+                     }
                   break;
              default:    break;
              }
